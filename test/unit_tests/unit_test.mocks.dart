// Mocks generated by Mockito 5.4.2 from annotations
// in orbital_spa/test/unit_tests/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i18;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i6;
import 'package:firebase_core/firebase_core.dart' as _i5;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter/src/widgets/notification_listener.dart' as _i12;
import 'package:flutter_bloc/flutter_bloc.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;
import 'package:orbital_spa/main.dart' as _i13;
import 'package:orbital_spa/services/auth/bloc/auth_bloc.dart' as _i15;
import 'package:orbital_spa/services/auth/bloc/auth_events.dart' as _i16;
import 'package:orbital_spa/services/auth/bloc/auth_state.dart' as _i4;
import 'package:orbital_spa/services/cloud/events/cloud_event.dart' as _i10;
import 'package:orbital_spa/services/cloud/events/firebase_cloud_event_storage.dart'
    as _i21;
import 'package:orbital_spa/services/cloud/reminders/cloud_reminder.dart'
    as _i11;
import 'package:orbital_spa/services/cloud/reminders/firebase_cloud_reminders_storage.dart'
    as _i22;
import 'package:orbital_spa/services/cloud/tasks/cloud_task.dart' as _i9;
import 'package:orbital_spa/services/cloud/tasks/firebase_cloud_task_storage.dart'
    as _i20;
import 'package:orbital_spa/views/main_page.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeStatelessElement_3 extends _i1.SmartFake
    implements _i2.StatelessElement {
  _FakeStatelessElement_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeState_4<T extends _i2.StatefulWidget> extends _i1.SmartFake
    implements _i2.State<T> {
  _FakeState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_5 extends _i1.SmartFake
    implements _i2.StatefulElement {
  _FakeStatefulElement_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeAuthState_6 extends _i1.SmartFake implements _i4.AuthState {
  _FakeAuthState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_7 extends _i1.SmartFake implements _i5.FirebaseApp {
  _FakeFirebaseApp_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_8 extends _i1.SmartFake implements _i6.Settings {
  _FakeSettings_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_9<T extends Object?> extends _i1.SmartFake
    implements _i7.CollectionReference<T> {
  _FakeCollectionReference_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_10 extends _i1.SmartFake implements _i7.WriteBatch {
  _FakeWriteBatch_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_11 extends _i1.SmartFake
    implements _i7.LoadBundleTask {
  _FakeLoadBundleTask_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_12<T1 extends Object?> extends _i1.SmartFake
    implements _i7.QuerySnapshot<T1> {
  _FakeQuerySnapshot_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_13<T extends Object?> extends _i1.SmartFake
    implements _i7.Query<T> {
  _FakeQuery_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_14<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentReference<T> {
  _FakeDocumentReference_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_15<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_16 extends _i1.SmartFake
    implements _i7.FirebaseFirestore {
  _FakeFirebaseFirestore_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_17 extends _i1.SmartFake
    implements _i7.AggregateQuery {
  _FakeAggregateQuery_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_18<T1 extends Object?> extends _i1.SmartFake
    implements _i7.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_19 extends _i1.SmartFake
    implements _i7.SnapshotMetadata {
  _FakeSnapshotMetadata_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCloudTask_20 extends _i1.SmartFake implements _i9.CloudTask {
  _FakeCloudTask_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCloudEvent_21 extends _i1.SmartFake implements _i10.CloudEvent {
  _FakeCloudEvent_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCloudReminder_22 extends _i1.SmartFake
    implements _i11.CloudReminder {
  _FakeCloudReminder_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Widget);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);
  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i2.InheritedWidget);
  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i12.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);
  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
}

/// A class which mocks [HomePage].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePage extends _i1.Mock implements _i13.HomePage {
  MockHomePage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget build(_i2.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_0(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i2.Widget);
  @override
  _i2.StatelessElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatelessElement_3(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i2.StatelessElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [MainPage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainPage extends _i1.Mock implements _i14.MainPage {
  MockMainPage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.State<_i14.MainPage> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_4<_i14.MainPage>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i2.State<_i14.MainPage>);
  @override
  _i2.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_5(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i2.StatefulElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i15.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.AuthState);
  @override
  _i8.Stream<_i4.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i4.AuthState>.empty(),
      ) as _i8.Stream<_i4.AuthState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i16.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i16.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i16.AuthEvent>(
    _i17.EventHandler<E, _i4.AuthState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i17.Transition<_i16.AuthEvent, _i4.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void onChange(_i17.Change<_i4.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Firebase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebase extends _i1.Mock implements _i5.Firebase {
  MockFirebase() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i7.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_7(
          this,
          Invocation.getter(#app),
        ),
      ) as _i5.FirebaseApp);
  @override
  set app(_i5.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set settings(_i6.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_8(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i6.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i7.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_10(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i7.WriteBatch);
  @override
  _i8.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> enablePersistence(
          [_i6.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i7.LoadBundleTask loadBundle(_i18.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_11(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i7.LoadBundleTask);
  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {#sslEnabled: sslEnabled},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i7.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i6.GetOptions? options = const _i6.GetOptions(),
    required _i7.FromFirestore<T>? fromFirestore,
    required _i7.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_12<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);
  @override
  _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i6.GetOptions? options = const _i6.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_12<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i7.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_13<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i7.Query<Map<String, dynamic>>);
  @override
  _i8.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i7.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i7.DocumentReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);
  @override
  _i8.Future<T> runTransaction<T>(
    _i7.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i19.ifNotNull(
              _i19.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_15<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i8.Future<T>);
  @override
  _i8.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setIndexConfiguration({
    required List<_i6.Index>? indexes,
    List<_i6.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i7.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_16(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i8.Future<_i7.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i8.Future<_i7.DocumentReference<T>>.value(
            _FakeDocumentReference_14<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i8.Future<_i7.DocumentReference<T>>);
  @override
  _i7.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_14<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i7.DocumentReference<T>);
  @override
  _i7.CollectionReference<R> withConverter<R extends Object?>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeCollectionReference_9<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.CollectionReference<R>);
  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_12<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_17(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i7.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_16(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i7.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_9<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i7.CollectionReference<T>);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> update(Map<Object, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i7.DocumentSnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i8.Future<_i7.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_18<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.DocumentSnapshot<T>>);
  @override
  _i8.Stream<_i7.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i8.Stream<_i7.DocumentSnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.DocumentSnapshot<T>>);
  @override
  _i8.Future<void> set(
    T? data, [
    _i6.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i7.DocumentReference<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_14<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_14<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);
  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_19(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);
  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);
  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));
  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QueryDocumentSnapshot<T> {
  MockQueryDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_14<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);
  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_19(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);
  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);
  @override
  T data() => (super.noSuchMethod(
        Invocation.method(
          #data,
          [],
        ),
        returnValue: _i19.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
      ) as T);
  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));
  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i7.QueryDocumentSnapshot<T>>[],
      ) as List<_i7.QueryDocumentSnapshot<T>>);
  @override
  List<_i7.DocumentChange<T>> get docChanges => (super.noSuchMethod(
        Invocation.getter(#docChanges),
        returnValue: <_i7.DocumentChange<T>>[],
      ) as List<_i7.DocumentChange<T>>);
  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_19(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);
  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery<T extends Object?> extends _i1.Mock implements _i7.Query<T> {
  MockQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_16(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i6.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_12<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);
  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_13<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);
  @override
  _i7.Query<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeQuery_13<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.Query<R>);
  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_17(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);
}

/// A class which mocks [FirebaseCloudTaskStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCloudTaskStorage extends _i1.Mock
    implements _i20.FirebaseCloudTaskStorage {
  MockFirebaseCloudTaskStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CollectionReference<Map<String, dynamic>> get tasks =>
      (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.getter(#tasks),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<_i9.CloudTask> createNewTask({required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewTask,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Future<_i9.CloudTask>.value(_FakeCloudTask_20(
          this,
          Invocation.method(
            #createNewTask,
            [],
            {#ownerUserId: ownerUserId},
          ),
        )),
      ) as _i8.Future<_i9.CloudTask>);
  @override
  _i8.Future<Iterable<_i9.CloudTask>> getTasks(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue:
            _i8.Future<Iterable<_i9.CloudTask>>.value(<_i9.CloudTask>[]),
      ) as _i8.Future<Iterable<_i9.CloudTask>>);
  @override
  _i8.Future<bool> updateTask({
    required String? documentId,
    required String? title,
    required String? text,
    required String? deadline,
    required int? difficulty,
    required int? importance,
    required int? timeRequired,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [],
          {
            #documentId: documentId,
            #title: title,
            #text: text,
            #deadline: deadline,
            #difficulty: difficulty,
            #importance: importance,
            #timeRequired: timeRequired,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> deleteTask({required String? documentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#documentId: documentId},
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> completeTask({
    required String? documentId,
    required int? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [],
          {
            #documentId: documentId,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Stream<Iterable<_i9.CloudTask>> allDocs({required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #allDocs,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Stream<Iterable<_i9.CloudTask>>.empty(),
      ) as _i8.Stream<Iterable<_i9.CloudTask>>);
}

/// A class which mocks [FirebaseCloudEventStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCloudEventStorage extends _i1.Mock
    implements _i21.FirebaseCloudEventStorage {
  MockFirebaseCloudEventStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CollectionReference<Map<String, dynamic>> get events =>
      (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.getter(#events),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<_i10.CloudEvent> createNewEvent({required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewEvent,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Future<_i10.CloudEvent>.value(_FakeCloudEvent_21(
          this,
          Invocation.method(
            #createNewEvent,
            [],
            {#ownerUserId: ownerUserId},
          ),
        )),
      ) as _i8.Future<_i10.CloudEvent>);
  @override
  _i8.Future<Iterable<_i10.CloudEvent>> getEvents(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue:
            _i8.Future<Iterable<_i10.CloudEvent>>.value(<_i10.CloudEvent>[]),
      ) as _i8.Future<Iterable<_i10.CloudEvent>>);
  @override
  _i8.Future<void> updateEvent({
    required String? documentId,
    required String? title,
    required String? description,
    required String? from,
    required String? to,
    required int? isAllDay,
    required int? doRemind,
    required String? remindAt,
    required int? uniqueId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [],
          {
            #documentId: documentId,
            #title: title,
            #description: description,
            #from: from,
            #to: to,
            #isAllDay: isAllDay,
            #doRemind: doRemind,
            #remindAt: remindAt,
            #uniqueId: uniqueId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteEvent({required String? documentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [],
          {#documentId: documentId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Stream<Iterable<_i10.CloudEvent>> allEvents(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #allEvents,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Stream<Iterable<_i10.CloudEvent>>.empty(),
      ) as _i8.Stream<Iterable<_i10.CloudEvent>>);
  @override
  _i8.Future<List<_i10.CloudEvent>> eventList() => (super.noSuchMethod(
        Invocation.method(
          #eventList,
          [],
        ),
        returnValue:
            _i8.Future<List<_i10.CloudEvent>>.value(<_i10.CloudEvent>[]),
      ) as _i8.Future<List<_i10.CloudEvent>>);
}

/// A class which mocks [FirebaseCloudReminderStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCloudReminderStorage extends _i1.Mock
    implements _i22.FirebaseCloudReminderStorage {
  MockFirebaseCloudReminderStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.CollectionReference<Map<String, dynamic>> get reminders =>
      (super.noSuchMethod(
        Invocation.getter(#reminders),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.getter(#reminders),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<_i11.CloudReminder> createNewReminder(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewReminder,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Future<_i11.CloudReminder>.value(_FakeCloudReminder_22(
          this,
          Invocation.method(
            #createNewReminder,
            [],
            {#ownerUserId: ownerUserId},
          ),
        )),
      ) as _i8.Future<_i11.CloudReminder>);
  @override
  _i8.Future<Iterable<_i11.CloudReminder>> getReminders(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReminders,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Future<Iterable<_i11.CloudReminder>>.value(
            <_i11.CloudReminder>[]),
      ) as _i8.Future<Iterable<_i11.CloudReminder>>);
  @override
  _i8.Future<void> updateReminder({
    required String? documentId,
    required String? title,
    required String? by,
    required int? doRemind,
    required String? remindAt,
    required int? doRepeat,
    required String? repeat,
    required int? isCompleted,
    required int? uniqueId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReminder,
          [],
          {
            #documentId: documentId,
            #title: title,
            #by: by,
            #doRemind: doRemind,
            #remindAt: remindAt,
            #doRepeat: doRepeat,
            #repeat: repeat,
            #isCompleted: isCompleted,
            #uniqueId: uniqueId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteReminder({required String? documentId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReminder,
          [],
          {#documentId: documentId},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> completeReminder({
    required String? documentId,
    required int? isCompleted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeReminder,
          [],
          {
            #documentId: documentId,
            #isCompleted: isCompleted,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Stream<Iterable<_i11.CloudReminder>> allReminders(
          {required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #allReminders,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Stream<Iterable<_i11.CloudReminder>>.empty(),
      ) as _i8.Stream<Iterable<_i11.CloudReminder>>);
  @override
  _i8.Stream<Iterable<DateTime>> allDates({required String? ownerUserId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #allDates,
          [],
          {#ownerUserId: ownerUserId},
        ),
        returnValue: _i8.Stream<Iterable<DateTime>>.empty(),
      ) as _i8.Stream<Iterable<DateTime>>);
  @override
  _i8.Stream<Iterable<_i11.CloudReminder>> dayReminder({
    required String? ownerUserId,
    required DateTime? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dayReminder,
          [],
          {
            #ownerUserId: ownerUserId,
            #date: date,
          },
        ),
        returnValue: _i8.Stream<Iterable<_i11.CloudReminder>>.empty(),
      ) as _i8.Stream<Iterable<_i11.CloudReminder>>);
}
